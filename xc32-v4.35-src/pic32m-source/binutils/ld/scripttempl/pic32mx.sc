#
# ALIGNMENT - Specifies the default alignment for sections within the output
#             file.  Defaults to ${ELFSIZE} / 8 if not specified
#
# BIG_OUTPUT_FORMAT - Names the BFD format to use for the output file
#                     when producing big endian output
#
# BSS_END_SYMBOLS - Symbols that specify the end of the .bss section
#
# BSS_START_SYMBOLS - Symbols that specify the beginning of the .bss
#                     section
#
# CODE_MEMORY_REGION - The region output specifier for all code sections
#
# DATA_START_LOAD_SYMBOL - The name of the symbol representing the
#                          beginning load address of the .data section.
#                          Defaults to _data_image_begin if not specified
#
# DATA_MEMORY_REGION - The region output specifier for all data sections
#
# ELFSIZE - Specifies the size of the ELF file (e.g., 32, 64).  Defaults to
#           32 if not specified
#
# ENTRY - Provides the symbol name that will be the application's entry point.
#         Defaults to _start if not specified.
#
# EXECUTABLE_SYMBOLS - Symbols that must be defined for an executable
#
# INPUT_FILES - INPUT commands of files to always include in the link
#
# LIB_SEARCH_DIRS - Additional library search directories that should be
#                   checked when searching for libraries specified with
#                   -llib.  This variable is automatically created by the
#                   genscript.sh file from the LIB_PATH specified in the
#                   Makefile, which is originally obtained from the
#                   configure command line's --with-lib-path option
#
# LITTLE_OUTPUT_FORMAT - Names the BFD format to use for the output file
#                        when producing little endian output
#
# NOP - Four byte opcode for no-op.  Defaults to 0
#
# OTHER_BSS_SECTIONS - Other output sections to include in the linker
#                      script after the .bss output section
#
# ATTRS_SECTIONS    - at the end
# OTHER_GOT_SYMBOLS - Symbols defined just before .got
#
# OTHER_READONLY_SECTION - Other sections besides the standard read-only
#                          sections that should be placed in the
#                          program flash
#
# OTHER_SDATA_SECTIONS - Other output sections to include in the linker
#                        script after the .sdata output section
#
# OTHER_DEBUG_SECTIONS - Other output sections to include in the linker script
#                        after the DEBUG sections
#
# OTHER_SECTIONS - Other output sections to include in the linker script
#                  before the DEBUG sections
#
# OTHER_TEXT_SECTIONS - Other sections besides the standard text section
#                       (.text, .stub, .text.*, and .gnu.linkonce.t.*)
#                       to allocate in t he .text section
#
# OUTPUT_ARCH - Specifies the particular output architecture to use for
#               the output file.  If not specified, defaults to either:
#               - ${ARCH} if MACHINE is not specified
#               - ${ARCH}:${MACHINE} if MACHINE is specified
#
# OUTPUT_FORMAT - Names the BFD format to use for the output file by default.
#                 Will be used to initialize BIG_OUTPUT_FORMAT and
#                 LITTLE_OUTPUT_FORMAT if they have not been previously defined
#
# SBSS_END_SYMBOLS - Symbols that specify the end of the .sbss section
#
# SBSS_START_SYMBOLS - Symbols that specify the beginning of the .sbss
#                      section
#
# SDATA_END_SYMBOLS - Symbols that specify the end of the .sdata section
#
# SDATA_START_SYMBOLS - Symbols that specify the beginning of the .sdata
#                       section
#
# TEXT_END_SYMBOLS - Symbols that specify the end of the .text section
#
# TEXT_START_ADDR - If set, will be used as the address of the first
#                   byte of the .text section
#
# TEXT_START_SYMBOLS - Symbols that specify the beginning of the .text section
#
# WRITABLE_RODATA - If set to yes, the .rodata section will be writable
#
#
#  Many sections come in three flavours.  There is the 'real' section,
#  like ".data".  Then there are the per-procedure or per-variable
#  sections, generated by -ffunction-sections and -fdata-sections in GCC,
#  and useful for --gc-sections, which for a variable "foo" might be
#  ".data.foo".  Then there are the linkonce sections, for which the linker
#  eliminates duplicates, which are named like ".gnu.linkonce.d.foo".
#  The exact correspondences are:
#
#  Section      Linkonce section
#  .text        .gnu.linkonce.t.foo
#  .rodata      .gnu.linkonce.r.foo
#  .data        .gnu.linkonce.d.foo
#  .bss         .gnu.linkonce.b.foo
#  .sdata       .gnu.linkonce.s.foo
#  .sbss        .gnu.linkonce.sb.foo
#  .sdata2      .gnu.linkonce.s2.foo
#  .sbss2       .gnu.linkonce.sb2.foo
#  .debug_info  .gnu.linkonce.wi.foo
#  .tdata       .gnu.linkonce.td.foo
#  .tbss        .gnu.linkonce.tb.foo
#
#  Each of these can also have corresponding .rel.* and .rela.* sections.


test -z "$ENTRY" && ENTRY=_start
test -z "${BIG_OUTPUT_FORMAT}" && BIG_OUTPUT_FORMAT=${OUTPUT_FORMAT}
test -z "${LITTLE_OUTPUT_FORMAT}" && LITTLE_OUTPUT_FORMAT=${OUTPUT_FORMAT}
test -z "${OUTPUT_ARCH}" && if [ -z "$MACHINE" ]; then OUTPUT_ARCH=${ARCH}; else OUTPUT_ARCH=${ARCH}:${MACHINE}; fi
test -z "${ELFSIZE}" && ELFSIZE=32
test -z "${ALIGNMENT}" && ALIGNMENT="${ELFSIZE} / 8"
test -z "${DATA_START_LOAD_SYMBOL}" && DATA_START_LOAD_SYMBOL=_data_image_begin
test -z "${TDATA_START_LOAD_SYMBOL}" && TDATA_START_LOAD_SYMBOL=_tdata_image_begin
test -z "${DATA_IMAGE_MEMORY_REGION}" && test ! -z "${CODE_MEMORY_REGION}" && DATA_IMAGE_MEMORY_REGION="AT>${CODE_MEMORY_REGION}"
test -z "$ATTRS_SECTIONS" && ATTRS_SECTIONS=".gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }"

DISCARDED="/DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) *(.discard) }"

# If WRITABLE_RODATA is set to yes, then the .rodata output section is
# considered writable and will be placed after the .data section; therefore,
# the .rodata section must be located in data memory instead of program
# flash
if [ -z ${WRITABLE_RODATA} ]; then
RODATA_MEMORY_REGION=${CODE_MEMORY_REGION}
else
RODATA_MEMORY_REGION="${DATA_MEMORY_REGION} ${DATA_IMAGE_MEMORY_REGION}"
fi

RELOCATING_MEM_REGIONS="
MEMORY
{
  kseg0_program_mem    (rx)  : ORIGIN = 0x9D000000, LENGTH = 0x80000
  kseg1_data_mem       (w!x) : ORIGIN = 0xA0000000, LENGTH = 0x8000
}
"

# These sections may be located in different locations for the different
# linker scripts that are generated; therefore, we define them separately
# here so that the scripting can put them in the correct location based on
# whether other variables are set.
RODATA="
  .rodata ${RELOCATING-0} :
  {
    ${RELOCATING+*(.gnu.linkonce.r.*)}
    *(.rodata1)
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  } >${RODATA_MEMORY_REGION}
"

SDATA="
  /*
   * We want the small data sections together, so single-instruction offsets
   * can access them all, and initialized data all before uninitialized, so
   * we can shorten the on-disk segment size.
   */
  .sdata ALIGN(${ALIGNMENT}) :
  {
    ${RELOCATING+${SDATA_START_SYMBOLS}}
    *(.sdata${RELOCATING+ .sdata.* .gnu.linkonce.s.*})
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
    ${RELOCATING+${SDATA_END_SYMBOLS}}
  } >${DATA_MEMORY_REGION}
"

SBSS="
  .sbss ALIGN(${ALIGNMENT}) :
  {
    ${RELOCATING+${SBSS_START_SYMBOLS}}
    *(.dynsbss)
    *(.sbss${RELOCATING+ .sbss.* .gnu.linkonce.sb.*})
    *(.scommon)
    ${RELOCATING+${SBSS_END_SYMBOLS}}
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  } >${DATA_MEMORY_REGION}
"

SDATA2="
  /*
   * Small initialized constant global and static data can be placed in the
   * .sdata2 section.  This is different from .sdata, which contains small
   * initialized non-constant global and static data.
   */
  .sdata2 ALIGN(${ALIGNMENT}) :
  {
    *(.sdata2${RELOCATING+ .sdata2.* .gnu.linkonce.s2.*})
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  } >${CODE_MEMORY_REGION}
"

SBSS2="
  /*
   * Uninitialized constant global and static data (i.e., variables which will
   * always be zero).  Again, this is different from .sbss, which contains
   * small non-initialized, non-constant global and static data.
   */
  .sbss2 ALIGN(${ALIGNMENT}) :
  {
    *(.sbss2${RELOCATING+ .sbss2.* .gnu.linkonce.sb2.*})
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  } >${CODE_MEMORY_REGION}
"

GOT="
  .got ALIGN(${ALIGNMENT}) :
  {
    *(.got.plt) *(.got)
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  } >${DATA_MEMORY_REGION} /* ${DATA_IMAGE_MEMORY_REGION} */
"

STACKNOTE="
  /DISCARD/ : { *(.note.GNU-stack) }
"

if [ "${BIG_OUTPUT_FORMAT}" = "${LITTLE_OUTPUT_FORMAT}" ]; then
cat <<EOF
OUTPUT_FORMAT("${OUTPUT_FORMAT}")
EOF
else
cat <<EOF
OUTPUT_FORMAT("${OUTPUT_FORMAT}", "${BIG_OUTPUT_FORMAT}",
	      "${LITTLE_OUTPUT_FORMAT}")
EOF
fi

cat <<EOF
OUTPUT_ARCH(${OUTPUT_ARCH})
ENTRY(${ENTRY})

${RELOCATING+${LIB_SEARCH_DIRS}}

${RELOCATING+${EXECUTABLE_SYMBOLS}}

${RELOCATING+${INPUT_FILES}}

${RELOCATING-${RELOCATING_MEM_REGIONS}}

SECTIONS
{
  /* Boot Sections */
  ${RELOCATING+${BOOT_SECTION}}

  /* Code Sections - Note that input sections *(.text) and *(.text.*)
  ** are not mapped here. Starting in C32 v2.00, the best-fit allocator
  ** locates them, so that .text may flow around absolute sections
  ** as needed.
  */
  .text :
  {
    *(.stub${RELOCATING+ .gnu.linkonce.t.*})
    KEEP (*(.text.*personality*))
    ${RELOCATING+${OTHER_TEXT_SECTIONS}}
    *(.gnu.warning)
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  } >${CODE_MEMORY_REGION}

  /* Global-namespace object initialization */
  .init ${RELOCATING-0} :
  {
    KEEP (*crti.o(.init))
    KEEP (*crtbegin.o(.init))
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o *crtn.o ).init))
    KEEP (*crtend.o(.init))
    KEEP (*crtn.o(.init))
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  } >${CODE_MEMORY_REGION}

  .fini ${RELOCATING-0} :
  {
    KEEP (*(.fini))
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  } >${CODE_MEMORY_REGION}

  .preinit_array ${RELOCATING-0} :
  {
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array))
    PROVIDE_HIDDEN (__preinit_array_end = .);
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  } >${CODE_MEMORY_REGION}

  .init_array ${RELOCATING-0} :
  {
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array))
    PROVIDE_HIDDEN (__init_array_end = .);
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  } >${CODE_MEMORY_REGION}

  .fini_array ${RELOCATING-0} :
  {
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT(.fini_array.*)))
    KEEP (*(.fini_array))
    PROVIDE_HIDDEN (__fini_array_end = .);
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  } >${CODE_MEMORY_REGION}

  .ctors ${RELOCATING-0} :
  {
    /* XC32 uses crtbegin.o to find the start of
       the constructors, so we make sure it is
       first.  Because this is a wildcard, it
       doesn't matter if the user does not
       actually link against crtbegin.o; the
       linker won't look for a file to match a
       wildcard.  The wildcard also means that it
       doesn't matter which directory crtbegin.o
       is in.  */
    KEEP (*crtbegin.o(.ctors))
    KEEP (*crtbegin?.o(.ctors))
    /* We don't want to include the .ctor section from
       the crtend.o file until after the sorted ctors.
       The .ctor section from the crtend file contains the
       end of ctors marker and it must be last */
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  } >${CODE_MEMORY_REGION}

  .dtors ${RELOCATING-0} :
  {
    KEEP (*crtbegin.o(.dtors))
    KEEP (*crtbegin?.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  } >${CODE_MEMORY_REGION}

  /* Read-only sections */
  ${WRITABLE_RODATA-${RODATA}}
  ${CREATE_SHLIB-${SDATA2}}
  ${CREATE_SHLIB-${SBSS2}}
  ${OTHER_READONLY_SECTIONS}

  .eh_frame_hdr ${RELOCATING-0} : 
  {
    *(.eh_frame_hdr) 
  } >${CODE_MEMORY_REGION}
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  .eh_frame ${RELOCATING-0} : ONLY_IF_RO 
  { 
    KEEP (*(.eh_frame))
  } >${CODE_MEMORY_REGION}
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  .gcc_except_table ${RELOCATING-0} : ONLY_IF_RO
  {
    *(.gcc_except_table .gcc_except_table.*)
  } >${CODE_MEMORY_REGION}
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  ${NO_SMALL_DATA+${GOT}}

  .dbg_data (NOLOAD) :
  {
    . += (DEFINED (_DEBUGGER) ? 0x200 : 0x0);
  } >${DATA_MEMORY_REGION}

  .jcr ${RELOCATING-0} :
  {
    KEEP (*(.jcr))
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  } >${DATA_MEMORY_REGION}

  ${WRITABLE_RODATA+${RODATA}}
  .eh_frame ${RELOCATING-0}  : ONLY_IF_RW 
  {
    KEEP (*(.eh_frame)) 
  } >${DATA_MEMORY_REGION}
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  .gcc_except_table ${RELOCATING-0}  : ONLY_IF_RW 
  {
    *(.gcc_except_table .gcc_except_table.*)
  } >${DATA_MEMORY_REGION}
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  /* Persistent data - Use the new C 'persistent' attribute instead. */
  .persist ${RELOCATING-0} :
  {
    _persist_begin = .;
    *(.persist .persist.*)
    *(.pbss .pbss.*)
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
    _persist_end = .;
  } >${DATA_MEMORY_REGION}

  /*
   * Note that input sections named .data* are no longer mapped here.
   * Starting in C32 v2.00, the best-fit allocator locates them, so
   * that they may flow around absolute sections as needed.
   */
  .data ${RELOCATING-0} :
  {
    ${RELOCATING+*(.gnu.linkonce.d.*)}
    ${CONSTRUCTING+SORT(CONSTRUCTORS)}
    *(.data1)
    ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  } >${DATA_MEMORY_REGION}

  ${OTHER_READWRITE_SECTIONS}
  ${RELOCATING+${OTHER_GOT_SYMBOLS}}
  ${NO_SMALL_DATA-${GOT}}
  ${OTHER_GOT_SECTIONS}
  ${CREATE_SHLIB+${SDATA2}}
  ${CREATE_SHLIB+${SBSS2}}

  /*
   * Note that "small" data sections are still mapped in the linker
   * script. This ensures that they are grouped together for
   * gp-relative addressing. Absolute sections are allocated after
   * the "small" data sections so small data cannot flow around them.
   */

  ${NO_SMALL_DATA-${SDATA}}
  ${OTHER_SDATA_SECTIONS}
  ${RELOCATING+${BSS_START_SYMBOLS}}
  ${NO_SMALL_DATA-${SBSS}}

  /*
   * Align here to ensure that the .bss section occupies space up to
   * _end.  Align after .bss to ensure correct alignment even if the
   * .bss section disappears because there are no input sections.
   *
   * Note that input sections named .bss* are no longer mapped here.
   * Starting in C32 v2.00, the best-fit allocator locates them, so
   * that they may flow around absolute sections as needed.
   *
   */
  .bss   ${RELOCATING-0} :
  {
    *(.dynbss)
    *(COMMON)
   /* Align here to ensure that the .bss section occupies space up to
      _end.  Align after .bss to ensure correct alignment even if the
      .bss section disappears because there are no input sections. */
   ${RELOCATING+. = ALIGN(. != 0 ? ${ALIGNMENT} : 1);}
  } >${DATA_MEMORY_REGION}
  ${OTHER_BSS_SECTIONS}
  ${RELOCATING+. = ALIGN(${ALIGNMENT}) ;}
  ${RELOCATING+_end = . ;}
  ${RELOCATING+${BSS_END_SYMBOLS}}
  ${OTHER_SECTIONS}
  /* Stabs debugging sections.  */
  .stab          0 : { *(.stab) }
  .stabstr       0 : { *(.stabstr) }
  .stab.excl     0 : { *(.stab.excl) }
  .stab.exclstr  0 : { *(.stab.exclstr) }
  .stab.index    0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }

  .comment       0 : { *(.comment) }

  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */

  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }

  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }

  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }

  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }

  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }

  .debug_pubtypes 0 : { *(.debug_pubtypes) }
  .debug_ranges   0 : { *(.debug_ranges) }

  ${OTHER_DEBUG_SECTIONS}
  ${OTHER_GOT_RELOC_SECTIONS}

  ${ATTRS_SECTIONS}

  ${RELOCATING+${OTHER_END_SYMBOLS}}
  ${RELOCATING+${STACKNOTE}}
  ${RELOCATING+${DISCARDED}}
}
EOF
